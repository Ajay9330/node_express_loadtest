const express = require("express");
const fs = require("fs");
const path = require("path");
const NodeCache = require("node-cache");
const app = express();
const cache = new NodeCache();  // In-memory cache

// Path to the static folder
const staticFolderPath = path.join(__dirname, "static");

// Ensure static folder exists
if (!fs.existsSync(staticFolderPath)) {
    fs.mkdirSync(staticFolderPath);
}

// Serve static files from the static folder
app.use("/static", express.static(staticFolderPath));

// Function to generate an HTML file of approximately n MB (returns HTML content as string)
function generateHtmlContent(n) {
    const targetSizeInBytes = n * 1024 * 1024;
    const content = "<div>This is a large HTML file generated by Node.js.</div>\n";
    const contentLength = Buffer.byteLength(content, 'utf8');
    let currentSize = 0;
    let generatedContent = "<!DOCTYPE html>\n<html>\n<head>\n<title>Large HTML File</title>\n</head>\n<body>\n";

    while (currentSize < targetSizeInBytes) {
        const remainingSize = targetSizeInBytes - currentSize;
        const chunksToAdd = Math.min(Math.floor(remainingSize / contentLength), 50);
        generatedContent += content.repeat(chunksToAdd);
        currentSize += contentLength * chunksToAdd;
        if (chunksToAdd === 0) {
            break;
        }
    }

    generatedContent += "</body>\n</html>";
    return generatedContent;
}

// ** Generate and Serve Route **
app.get("/generateandserve/:sizeMB.html", (req, res) => {
    const size = parseInt(req.params.sizeMB);
    const generatedHtmlContent = generateHtmlContent(size);
    res.send(generatedHtmlContent);  // Serve the generated HTML content
});

// ** Static Route: Serve pre-existing pages from the static folder **
// app.get("/static/:sizeMB.html", (req, res) => {
//     const size = parseInt(req.params.sizeMB);
//     const filePath = path.join(staticFolderPath, `generated_${size}MB.html`);
//     console.log('hi')
//     if (!fs.existsSync(filePath)) {
//         return res.status(404).send("File not found in static folder.");
//     }

//     fs.readFile(filePath, "utf8", (err, data) => {
//         if (err) {
//             return res.status(500).send("Error reading file.");
//         }
//         res.send(data);
//     });
// });

// ** Node-Cache Route: Serve cached data if available **
app.get("/node-cache/:sizeMB.html", (req, res) => {
    const size = parseInt(req.params.sizeMB);

    // Check if the data is in cache
    if (cache.has(size)) {
        console.log("Serving from cache:", size);
        return res.send(cache.get(size));
    }

    // Generate HTML content if not cached
    const generatedHtmlContent = generateHtmlContent(size);

    // Cache the generated content for future requests (1 hour cache duration)
    cache.set(size, generatedHtmlContent, 60 * 60); // Cache for 1 hour
    
    res.send("page was not in cache"+" but now page got cached");  // Serve the generated HTML content
});

// Route to generate files for testing purposes (1MB to 10MB)
function generateFilesInRange() {
    const start = 1;
    const end = 10;

    for (let i = start; i <= end; i++) {
        const staticFilePath = path.join(staticFolderPath, `${i}MB.html`);
        const generatedHtmlContent = generateHtmlContent(i);

        // Generate the file in the static folder if it doesn't exist
        if (!fs.existsSync(staticFilePath)) {
            fs.writeFileSync(staticFilePath, generatedHtmlContent);
        }
        cache.set(i,generatedHtmlContent,60*60);

    }

    console.log("Files generated for 1MB to 10MB in static folder.");
}

generateFilesInRange();

// Serve error page with sample links if user hits a wrong route
app.get('*', (req, res) => {
    res.status(404).send(`
        <h1>404 - Page Not Found</h1>
        <p>It seems you have reached a wrong route. Here are some valid routes you can try:</p>
        <ul>
            <li><a href="/static/1MB.html">/static/1MB.html</a></li>
            <li><a href="/generateandserve/1MB.html">/generateandserve/1MB.html</a></li>
            <li><a href="/node-cache/1MB.html">/node-cache/1MB.html</a></li>
        </ul>
    `);
});

// Start the Express server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
